utils = import "utils.spwn"
extract obj_props

calculate_line_len = (a: @array, b: @array) {
  return $.sqrt((b[0] - a[0]) ^ 2 + (b[1] - a[1]) ^ 2)
}

calculate_line = (a: @array, b: @array, line_length: @number, distance: @number) {
  return [
    a[0] + (b[0] - a[0]) * (distance / line_length),
    a[1] + (b[1] - a[1]) * (distance / line_length)
  ]
}

type @line_graph
impl @line_graph {
  new: #[
    constructor,
    desc("Creates a line graph.")
    example('
@line_graph::new(
  {
    "a": 5,
    "b": 7,
    "c": 3,
  },
  title="Title",
  x_axis_label="X axis",
  y_axis_label="Y axis",
  line_color=hex("#FF99A5"),
  sorting_array=["a", "b", "c"]
)
')
  ] (
    #[desc("Values as a dictionary.")] values: @dictionary = {},
    #[desc("Title of the graph.")] title: @string = "",
    #[desc("X axis label.")] x_axis_label: @string = "",
    #[desc("Y axis label.")] y_axis_label: @string = "",
    #[desc("Color of lines as a chroma.")] line_color: @chroma = null,
    #[desc("Color channel of the axes.")] axis_color_channel: @color = ?c,
    #[desc("Color channel of the text.")] text_color_channel: @color = ?c,
    #[desc("Array of labels to sort the values from. Dictionaries in SPWN are not ordered.")] sorting_array: @array = []
  ) {
    let temp = @line_graph::{
      values: {},
      title,
      x_axis_label,
      y_axis_label,
      line_color,
      axis_color_channel,
      text_color_channel,
      sorting_array,
      sorting_array_def: sorting_array.length == 0
    }

    // check for type errors
    temp.add_dict(values)
    return temp
  },

  add: (
    self,
    #[desc("Label of the value.")] label: @string,
    #[desc("Value.")] value: @number
  ) {
    self.add_dict({ label: value })
  },

  add_dict: (self, #[desc("Values as a dictionary.")] values: @dictionary) {
    for [label, value] in values {
      if !(value is @number) { throw "Value of " + label + " should be of type @number." }
      self.values.set(label, value)
      
      if self.sorting_array_def {
        self.sorting_array.push(label)
      }
    }
  },

  set_title: (self, title: @string) {
    self.title = title
  },

  set_x_axis_label: (self, x_axis_label: @string) {
    self.x_axis_label = x_axis_label
  },

  set_y_axis_label: (self, y_axis_label: @string) {
    self.y_axis_label = y_axis_label
  },

  set_line_color: (self, color: @chroma) {
    self.line_color = color
  },

  show: (
    self,
    #[desc("Start position of the graph measured from the bottom left corner.")] start_pos: @array = [0, 0],
    #[desc("Amount to step on the Y axis.")] y_step: @number = 1,
    #[desc("Amount of blocks between each step.")] between_y_step: @number = 1,
    #[dedc("Groups to add to the graph objects.")] groups: @array = []
  ) {
    labels = self.sorting_array if self.sorting_array.length > 0 else self.values.keys()
    if labels.length == 0 { throw "Nothing has been added to the graph yet." }

    let values = []
    let values_max = 0
    let labels_length = []
    let labels_length_sum = 0

    for label in labels {
      values.push(self.values[label])
      if self.values[label] > values_max {
        values_max = self.values[label]
      }

      len = $.ceil(label.length * 0.5 + 2)
      labels_length.push(len)
      labels_length_sum += len
    }
    
    start_x = utils.grid(start_pos[0]) + 45 if self.y_axis_label.length > 0 else 15
    start_y = utils.grid(start_pos[1]) + 45 if self.x_axis_label.length > 0 else 15
    v_range_end = $.ceil(values_max / y_step) + 1
    middle = start_x + utils.grid(labels_length_sum / 2 + 1.5)

    // create line color channel
    line_color_channel = utils.create_color_channel(self.line_color)

    // add title text
    utils.create_title_text(self.title, v_range_end, between_y_step, self.text_color_channel, groups, middle, start_y)

    // add y axis label
    utils.create_y_axis_label(self.y_axis_label, v_range_end, between_y_step, self.text_color_channel, groups, start_y, start_x)

    // add x axis label
    utils.create_x_axis_label(self.x_axis_label, v_range_end, self.text_color_channel, groups, middle, start_y)

    // vertical axis
    for i in 0..v_range_end {
      if i > 0 {
        // vertical lines
        for j in 1..(between_y_step + 1) {
          $.add(obj {
            OBJ_ID: 1756,
            X: start_x + 30,
            Y: start_y + utils.grid(between_y_step * (i - 1) + j + 1),
            GROUPS: groups,
            COLOR: self.axis_color_channel
          })
        }
      }

      // step lines
      $.add(obj {
        OBJ_ID: 1756,
        X: start_x + 30,
        Y: start_y + utils.grid(between_y_step * i + 1.5),
        ROTATION: 90,
        SCALING: 0.5,
        GROUPS: groups,
        COLOR: self.axis_color_channel
      })

      // step text
      @string(y_step * i).to_obj().with(
        X, start_x + 15
      ).with(
        Y, start_y + utils.grid(between_y_step * i + 1.5)
      ).with(
        SCALING, 0.5
      ).with(
        COLOR, self.text_color_channel
      ).with(
        GROUPS, groups
      ).add()
    }

    // horizontal axis
    let positions = []
    let accum = 0
    
    for j in 0..labels_length.length {
      // horizontal lines
      len = labels_length[j]

      for i in 1..(len + 1) {
        $.add(obj {
          OBJ_ID: 1756,
          X: start_x + accum + utils.grid(i + 1),
          Y: start_y + 30,
          ROTATION: 90,
          GROUPS: groups,
          COLOR: self.axis_color_channel
        })
      }

      x = start_x + accum + utils.grid(len / 2 + 1.5)

      // label
      labels[j].to_obj().with(
        Y, start_y + 15
      ).with(
        X, x
      ).with(
        COLOR, self.text_color_channel
      ).with(
        GROUPS, groups
      ).add()

      // value dot
      amount_to_mv = 30 * (between_y_step / y_step) * (values[j] - utils.floor(values[j], y_step / between_y_step))
      y = start_y + utils.grid(
        $.ceil(values[j] / y_step * between_y_step) + (0.5 if amount_to_mv > 0 else 1.5)
      ) + amount_to_mv

      $.add(obj {
        OBJ_ID: 725,
        X: x,
        Y: y,
        GROUPS: groups,
        COLOR: line_color_channel,
        SCALING: 1.8
      })

      // connecting points with line to become a line graph
      if j > 0 {
        last_pos = positions[positions.length - 1]
        line_length = calculate_line_len([x, y], last_pos)
        line_angle = $.atan2(x - last_pos[0], y - last_pos[1]) * 180 / PI

        for k in 0..$.ceil(line_length / 30 - 1) {
          line_end = calculate_line(last_pos, [x, y], line_length, k * 30 + 15)

          $.add(obj {
            OBJ_ID: 1756,
            X: line_end[0],
            Y: line_end[1],
            ROTATION: line_angle,
            GROUPS: groups,
            COLOR: line_color_channel
          })
        }

        lln_end = calculate_line([x, y], last_pos, line_length, 15)
        $.add(obj {
          OBJ_ID: 1756,
          X: lln_end[0],
          Y: lln_end[1],
          ROTATION: line_angle,
          GROUPS: groups,
          COLOR: line_color_channel
        })
      }

      accum += utils.grid(len) + 15
      positions.push([x, y])
    }
  }
}