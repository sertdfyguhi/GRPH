utils = import "utils.spwn"
extract obj_props

type @scatter_graph
impl @scatter_graph {
  new: (
    #[desc("Values as a array.")] values: @array = [],
    #[desc("Title of the graph.")] title: @string = "",
    #[desc("X axis label.")] x_axis_label: @string = "",
    #[desc("Y axis label.")] y_axis_label: @string = "",
    #[desc("Color channel of the axes.")] axis_color_channel: @color = ?c,
    #[desc("Color channel of the text.")] text_color_channel: @color = ?c
  ) {
    let temp = @scatter_graph::{
      values: [],
      title,
      x_axis_label,
      y_axis_label,
      axis_color_channel,
      text_color_channel,
    }

    // check for type errors
    temp.add_array(values)
    return temp
  },

  add: (
    self,
    #[desc("Position (x, y) of the point.")] pos: @array,
    #[desc("Color of the point.")] color: @chroma = null
  ) {
    self.add_array([{ pos, color }])
  },

  add_array: (self, #[desc("Values as a array.")] values: @array) {
    for value in values {
      if !(value is @dictionary) { throw "Value is not of type @dictionary." }
      if !("pos" in value) { throw "Position not provided." }

      color = value.color if "color" in value else null

      if !(value.pos is @array) { throw "Position provided is not of type @array." }
      if !(color is @chroma|@NULL) { throw "Color provided is not of type @chroma." }
      if value.pos.length < 2 { throw "Position provided is not of length 2." }

      pos = value.pos[:2]

      pos.map((v) {
        if !(v is @number) { throw "Position is not of type [@number]." }
      })

      self.values.push({pos, color})
    }
  },

  set_title: (self, label: @string) {
    self.title = label
  },

  set_x_axis_label: (self, label: @string) {
    self.x_axis_label = label
  },

  set_y_axis_label: (self, label: @string) {
    self.y_axis_label = label
  },

  show: (
    self,
    #[desc("Start position of the graph measured from the bottom left corner.")] start_pos: @array = [0, 0],
    #[desc("Amount to step on the X axis.")] x_step: @number = 1,
    #[desc("Amount to step on the Y axis.")] y_step: @number = 1,
    #[desc("Amount of blocks between each step on the X axis.")] between_x_step: @number = 1,
    #[desc("Amount of blocks between each step on the Y axis.")] between_y_step: @number = 1,
    #[dedc("Groups to add to the graph objects.")] groups: @array = []
  ) {
    if self.values.length == 0 { throw "Nothing has been added to the graph yet." }

    // find maximum x and y position
    let [x_max, y_max] = [0, 0]
    for v in self.values {
      [x, y] = v.pos
      if x > x_max { x_max = x }
      if y > y_max { y_max = y }
    }

    margin = 45 if self.y_axis_label.length > 0 else 15
    start_x = utils.grid(start_pos[0]) + margin
    start_y = utils.grid(start_pos[1]) + margin
    v_range_end = $.ceil(y_max / y_step) + 1
    middle = start_x + utils.grid(x_max / x_step * between_x_step / 2 + 1.5)

    // add title text
    utils.create_title_text(self.title, v_range_end, between_y_step, self.text_color_channel, groups, middle, start_y)

    // add y axis label
    utils.create_y_axis_label(self.y_axis_label, v_range_end, between_y_step, self.text_color_channel, groups, start_y, start_x)

     // add x axis label
    utils.create_x_axis_label(self.x_axis_label, v_range_end, self.text_color_channel, groups, middle, start_y)

    // vertical axis
    for i in 0..v_range_end {
      if i > 0 {
        // vertical lines
        for j in 2..(between_y_step + 2) {
          $.add(obj {
            OBJ_ID: 1756,
            X: start_x + utils.ONE_BLOCK,
            Y: start_y + utils.grid(between_y_step * (i - 1) + j),
            GROUPS: groups,
            COLOR: self.axis_color_channel
          })
        }
      }

      utils.create_step_y(
        i,
        start_x,
        start_y,
        y_step,
        between_y_step,
        groups,
        self.axis_color_channel,
        self.text_color_channel
      )
    }

    // horizontal axis
    for i in 0..$.ceil(x_max / x_step) + 1 {
      if i > 0 {
        // horizontal lines
        for j in 2..(between_x_step + 2) {
          $.add(obj {
            OBJ_ID: 1756,
            X: start_x + utils.grid(between_x_step * (i - 1) + j),
            Y: start_y + 30,
            ROTATION: 90,
            GROUPS: groups,
            COLOR: self.axis_color_channel
          })
        }
      }

      utils.create_step_x(
        i,
        start_x,
        start_y,
        x_step,
        between_x_step,
        groups,
        self.axis_color_channel,
        self.text_color_channel
      )
    }

    for point in self.values {
      color = utils.create_color_channel(point.color)

      $.add(obj {
        OBJ_ID: 725,
        X: start_x + utils.grid(point.pos[0] / x_step * between_x_step + 1.5),
        Y: start_y + utils.grid(point.pos[1] / y_step * between_y_step + 1.5),
        GROUPS: groups,
        COLOR: color,
        SCALING: 1.8
      })
    }
  }
}