utils = import "utils.spwn"
extract obj_props

type @bar_chart
impl @bar_chart {
  new: #[
    constructor,
    desc("Creates a bar chart.")
    example('
@bar_chart::new(
  {
    "a": 5,
    "b": 7,
    "c": 3,
  },
  title="Title",
  y_axis_label="Y axis",
  sorting_array=["a", "b", "c"]
)
') ] (
    #[desc("Values as a dictionary.")] values: @dictionary = {},
    #[desc("Title of the graph.")] title: @string = "",
    #[desc("Y axis label.")] y_axis_label: @string = "",
    #[desc("Color channel of the axes.")] axis_color_channel: @color = ?c,
    #[desc("Color channel of the text.")] text_color_channel: @color = ?c,
    #[desc("Array of labels to sort the values from. Dictionaries in SPWN are not ordered.")] sorting_array: @array = []
  ) {
    let temp = @bar_chart::{
      values: {},
      title,
      y_axis_label,
      axis_color_channel,
      text_color_channel,
      sorting_array,
      sorting_array_def: sorting_array.length == 0
    }

    // to be able to check for non number values
    temp.add_dict(values)
    return temp
  },

  add: (
    self,
    #[desc("Label of the value.")] label: @string,
    #[desc("Value.")] value: @number,
    #[desc("Color of the bar for this value.")] color: @chroma = null
  ) {
    self.values.set(label, { value, color })

    if self.sorting_array_def {
      self.sorting_array.push(label)
    }
  },

  add_dict: (self, #[desc("Values as a dictionary.")] values: @dictionary) {
    for [label, value] in values {
      match value {
        @number: self.values.set(label, { value, color: null }),
        @dictionary: () {
          if !("value" in value) {
            throw "Value of " + label + " not provided in dictionary."
          }

          let temp = value
          if !("color" in value) {
            if !(value.color is @chroma) { throw "Color should be of type @chroma." }
            temp.set("color", null)
          }

          self.values.set(label, temp)
        } (),
        else: () { throw "Value should be of type @dictionary or @number." } ()
      }

      if self.sorting_array_def {
        self.sorting_array.push(label)
      }
    }
  },

  set_title: (self, label: @string) {
    self.title = label
  },

  set_y_axis_label: (self, label: @string) {
    self.y_axis_label = label
  },

  show: (
    self,
    #[desc("Start position of the graph measured from the bottom left corner.")] start_pos: @array = [0, 0],
    #[desc("Amount to step on the Y axis.")] y_step: @number = 1,
    #[desc("Amount of blocks between each step.")] between_y_step: @number = 1,
    #[dedc("Groups to add to the graph objects.")] groups: @array = []
  ) {
    // setup graph axis
    labels = self.sorting_array if self.sorting_array.length > 0 else self.values.keys()
    if labels.length == 0 { throw "Nothing has been added to the graph yet." }

    let labels_length = []
    let labels_length_sum = 0
    let val_dict = []
    let values = []
    let v_max = 0

    for label in labels {
      x = self.values[label]
      val_dict.push(x)
      val = x.value if x is @dictionary else x
      values.push(val)

      if val > v_max {
        v_max = val
      }

      len = $.ceil(label.length * 0.6 + 3)
      labels_length.push(len)
      labels_length_sum += len
    }

    start_x = utils.grid(start_pos[0]) + 45 if self.y_axis_label.length > 0 else 15
    start_y = utils.grid(start_pos[1]) + 15
    v_range_end = $.ceil(v_max / y_step) + 1

    // add title text
    utils.create_title_text(
      self.title,
      v_range_end,
      between_y_step,
      self.text_color_channel,
      groups,
      start_x + utils.grid(labels_length_sum / 2 + 1.5),
      start_y
    )

    // add y axis label
    utils.create_y_axis_label(self.y_axis_label, v_range_end, between_y_step, self.text_color_channel, groups, start_y, start_x)

    // vertical axis
    for i in 0..v_range_end {
      if i > 0 {
        // vertical lines
        for j in 1..(between_y_step + 1) {
          $.add(obj {
            OBJ_ID: 1756,
            X: start_x + 30,
            Y: start_y + utils.grid(between_y_step * (i - 1) + j + 1),
            GROUPS: groups,
            COLOR: self.axis_color_channel
          })
        }
      }

      // step lines
      $.add(obj {
        OBJ_ID: 1756,
        X: start_x + 30,
        Y: start_y + utils.grid(between_y_step * i + 1.5),
        ROTATION: 90,
        SCALING: 0.5,
        GROUPS: groups,
        COLOR: self.axis_color_channel
      })

      // step text
      @string(y_step * i).to_obj().with(
        X, start_x + 15
      ).with(
        Y, start_y + utils.grid(between_y_step * i + 1.5)
      ).with(
        SCALING, 0.5
      ).with(
        COLOR, self.text_color_channel
      ).with(
        GROUPS, groups
      ).add()
    }

    // horizontal axis
    let accum = 0
    
    for j in 0..labels_length.length {
      // horizontal lines
      len = labels_length[j]

      for i in 1..(len + 1) {
        $.add(obj {
          OBJ_ID: 1756,
          X: start_x + accum + utils.grid(i + 1),
          Y: start_y + 30,
          ROTATION: 90,
          GROUPS: groups,
          COLOR: self.axis_color_channel
        })
      }

      x = start_x + accum + utils.grid(len / 2 + 1.5)

      // label
      labels[j].to_obj().with(
        Y, start_y + 15
      ).with(
        X, x
      ).with(
        COLOR, self.text_color_channel
      ).with(
        GROUPS, groups
      ).add()

      // create bar color
      color = utils.create_color_channel(val_dict[j].color) if "color" in val_dict[j] else ?c

      // bars
      range_end = $.ceil(values[j] / y_step * between_y_step)
      for j in 1..range_end {
        $.add(obj {
          OBJ_ID: 208,
          X: x,
          Y: start_y + utils.grid(j + 1),
          GROUPS: groups,
          COLOR: color,
          COLOR_2: color
        })
      }

      // add last object to be able to add values that is not a multiple of step
      amount_to_mv = 30 * (between_y_step / y_step) * (values[j] - utils.floor(values[j], y_step / between_y_step))
      $.add(obj {
        OBJ_ID: 208,
        X: x,
        Y: start_y + utils.grid(range_end + (0 if amount_to_mv > 0 else 1)) + amount_to_mv,
        GROUPS: groups,
        COLOR: color,
        COLOR_2: color
      })

      accum += utils.grid(len) + 15
    }
  }
}